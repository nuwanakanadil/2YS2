"use client";

import React, { useState, useEffect } from "react";

const API_BASE = process.env.NEXT_PUBLIC_API_BASE || "http://localhost:5000";

export default function SalesReports() {
  const [reports, setReports] = useState([]);
  const [filterType, setFilterType] = useState("all");
  const [search, setSearch] = useState("");
  const [loading, setLoading] = useState(true);
  const [err, setErr] = useState("");
  const [page, setPage] = useState(1);
  const [total, setTotal] = useState(0);
  const [limit] = useState(20);
  const [preview, setPreview] = useState(null);

  function resolveDownloadHref(r) {
    const url = r.downloadUrl || "";
    return url.startsWith("http") ? url : `${API_BASE}${url}`;
  }

  async function load() {
    setLoading(true);
    setErr("");
    try {
      const params = new URLSearchParams({
        page: String(page),
        limit: String(limit),
      });
      if (search.trim()) params.set("q", search.trim());
      if (filterType !== "all") params.set("type", filterType);

      const url = `${API_BASE}/api/reports?${params.toString()}`;
      const res = await fetch(url, {
        credentials: "include",
        headers: { Accept: "application/json" },
      });

      const text = await res.text(); // read body once
      if (!res.ok) {
        console.error("Reports list error:", res.status, res.statusText, text);
        throw new Error(`HTTP ${res.status} ${res.statusText} — ${text || "No details"}`);
      }

      const json = JSON.parse(text);
      setReports(json.items || []);
      setTotal(json.total || 0);
    } catch (e) {
      setErr(String(e.message || e));
      setReports([]);
      setTotal(0);
    } finally {
      setLoading(false);
    }
  }

  useEffect(() => { load(); /* eslint-disable-next-line */ }, [filterType, page]);

  const onSearch = (e) => {
    e.preventDefault();
    setPage(1);
    load();
  };

  const openPreview = async (id) => {
    try {
      const url = `${API_BASE}/api/reports/${id}`;
      const res = await fetch(url, { credentials: "include", headers: { Accept: "application/json" } });
      const text = await res.text();
      if (!res.ok) throw new Error(`HTTP ${res.status} ${res.statusText} — ${text}`);
      setPreview(JSON.parse(text));
    } catch (e) {
      alert(`Failed to load report preview: ${e.message}`);
    }
  };

  const closePreview = () => setPreview(null);

  return (
    <div>
      <div className="mb-6">
        <h1 className="text-2xl font-bold text-gray-800">Sales Reports</h1>
        <p className="text-gray-500 mt-1">View reports generated by managers.</p>
      </div>

      <form onSubmit={onSearch} className="flex flex-col sm:flex-row sm:items-center justify-between mb-6 gap-4">
        <input
          type="text"
          placeholder="Search reports..."
          value={search}
          onChange={(e) => setSearch(e.target.value)}
          className="px-4 py-2 border rounded-md w-full sm:w-1/3 focus:outline-none focus:ring-2 focus:ring-green-500"
        />
        <div className="flex gap-3">
          <select
            value={filterType}
            onChange={(e) => { setPage(1); setFilterType(e.target.value); }}
            className="px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
          >
            <option value="all">All Types</option>
            <option value="PDF">PDF</option>
            <option value="Excel">Excel</option>
            <option value="CSV">CSV</option>
          </select>
          <button type="submit" className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700">Search</button>
        </div>
      </form>

      <div className="bg-white rounded-lg shadow divide-y divide-gray-200">
        {loading ? (
          <p className="p-6 text-gray-500 text-center">Loading…</p>
        ) : err ? (
          <p className="p-6 text-red-600 text-center">{err}</p>
        ) : reports.length === 0 ? (
          <p className="p-6 text-gray-500 text-center">No reports found.</p>
        ) : (
          reports.map((r) => (
            <div key={r._id} className="p-4 flex flex-col sm:flex-row sm:items-center justify-between gap-4">
              <div>
                <h3 className="text-lg font-semibold text-gray-800">{r.name}</h3>
                <p className="text-sm text-gray-500">{r.description}</p>
                <p className="text-xs text-gray-400 mt-1">
                  Period: {new Date(r.from).toLocaleDateString()} - {new Date(r.to).toLocaleDateString()}
                </p>
                <p className="text-xs text-gray-400">Type: {r.type}</p>
                <p className="text-xs text-gray-400">Status: {r.status}</p>
              </div>
              <div className="flex space-x-3">
                <button
                  onClick={() => openPreview(r._id)}
                  className="px-4 py-2 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
                >
                  View
                </button>
                <a href={resolveDownloadHref(r)} download className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700">
                  Download
                </a>
              </div>
            </div>
          ))
        )}
      </div>

      <div className="px-4 py-3 border-t border-gray-200 flex items-center justify-end gap-2 mt-2 bg-white rounded-lg shadow">
        <button
          className="px-3 py-1 border rounded disabled:opacity-50"
          onClick={() => setPage((p) => Math.max(1, p - 1))}
          disabled={page <= 1 || loading}
        >
          Prev
        </button>
        <button
          className="px-3 py-1 border rounded disabled:opacity-50"
          onClick={() => setPage((p) => p + 1)}
          disabled={reports.length < limit || loading}
        >
          Next
        </button>
      </div>

      {preview && (
        <div className="fixed inset-0 bg-black/40 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg shadow-lg w-full max-w-2xl p-6">
            <div className="flex items-start justify-between">
              <div>
                <h3 className="text-xl font-semibold text-gray-800">{preview.name}</h3>
                <p className="text-sm text-gray-500">{preview.description}</p>
                <p className="text-xs text-gray-400 mt-1">
                  Period: {new Date(preview.from).toLocaleDateString()} - {new Date(preview.to).toLocaleDateString()}
                </p>
              </div>
              <button onClick={() => setPreview(null)} className="text-gray-500 hover:text-gray-700 text-2xl leading-none">×</button>
            </div>

            <div className="mt-4 grid grid-cols-3 gap-4">
              <div className="bg-gray-50 rounded p-4">
                <div className="text-xs text-gray-500">Total Sales</div>
                <div className="text-lg font-semibold">${Number(preview.preview?.totalSales || 0).toLocaleString()}</div>
              </div>
              <div className="bg-gray-50 rounded p-4">
                <div className="text-xs text-gray-500">Orders</div>
                <div className="text-lg font-semibold">{Number(preview.preview?.ordersCount || 0).toLocaleString()}</div>
              </div>
              <div className="bg-gray-50 rounded p-4">
                <div className="text-xs text-gray-500">Top Items</div>
                <div className="text-lg font-semibold">{(preview.preview?.topProducts?.length || 0).toLocaleString()}</div>
              </div>
            </div>

            <div className="mt-6 flex justify-end gap-3">
              <a href={resolveDownloadHref(preview)} download className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700">
                Download
              </a>
              <button onClick={() => setPreview(null)} className="px-4 py-2 border rounded-md">Close</button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
